let sql = require "~/sql"

let db-interface = require (cat (getenv "www") "/db-interface")

let test-get-project-details = function db admin-token id do
	let rand-admin-token = cat "admin:" (rand-hexs 32)
	
	assert (db-interface :get-project-details db null id) == null
	assert (db-interface :get-project-details db rand-admin-token id) == null
	
	let project-details = assert (db-interface :get-project-details db admin-token id)
	
	project-details
end

let test-get-user-projects = function db user-token do
	let rand-user-token1 = cat (user-token split: ":" 0) ":" (rand-hexs 32)
	let rand-user-token2 = cat (round (invoke random) * 100) ":" (rand-hexs 32)
	
	assert (db-interface :get-user-projects db null) == null
	assert (db-interface :get-user-projects db rand-user-token1) == null
	assert (db-interface :get-user-projects db rand-user-token2) == null
	
	let user-projects = assert (db-interface :get-user-projects db user-token)
	
	user-projects
end

let test-get-user-details = function db user-token expected-name expected-member-id do
	let rand-user-token1 = cat (user-token split: ":" 0) ":" (rand-hexs 32)
	let rand-user-token2 = cat (round (invoke random) * 100) ":" (rand-hexs 32)
	
	assert (db-interface :get-user-details db null) == null
	assert (db-interface :get-user-details db rand-user-token1) == null
	assert (db-interface :get-user-details db rand-user-token2) == null 
	
	let user-details = assert (db-interface :get-user-details db user-token)
	
	assert (user-details :name) == expected-name
	assert (user-details :member_id) == expected-member-id
end

invoke do
	let static-time = 0
	let global time = function do
		static-time
	end
	
	let db = sql :open (db-interface :db-path)
	
	assert (sizeof (db "SELECT * FROM user_logins")) == 0
	
	# Incorrect passwords/ids
	assert (db-interface :login-user db "12a" (getenv "PASS2")) == null
	assert (sizeof (db "SELECT * FROM user_logins")) == 0
	
	assert (db-interface :login-user db "1" (getenv "PASS3")) == null
	assert (sizeof (db "SELECT * FROM user_logins")) == 0
	
	assert (db-interface :login-user db "9.99" (getenv "PASS1")) == null
	assert (sizeof (db "SELECT * FROM user_logins")) == 0
	
	assert (db-interface :login-user db "12a" "some-random-password") == null
	assert (sizeof (db "SELECT * FROM user_logins")) == 0
	assert (db-interface :login-user db "1" "some-random-password2") == null
	assert (sizeof (db "SELECT * FROM user_logins")) == 0
	assert (db-interface :login-user db "9.99" "some-random-password3") == null
	assert (sizeof (db "SELECT * FROM user_logins")) == 0
	
	

	# Correct logins	
	let user1-token = assert (db-interface :login-user db "12a" (getenv "PASS1"))
	assert (sizeof (db "SELECT * FROM user_logins")) == 1
	
	let user2-token = assert (db-interface :login-user db "1" (getenv "PASS2"))
	assert (sizeof (db "SELECT * FROM user_logins")) == 2
	
	let user3-token = assert (db-interface :login-user db "9.99" (getenv "PASS3"))
	assert (sizeof (db "SELECT * FROM user_logins")) == 3
	
	# auth-user
	let u1 = db-interface :auth-user db user1-token
	assert (u1 :name) == "user1"
	assert (u1 :member_id) == "12a"
	
	let u2 = db-interface :auth-user db user2-token
	assert (u2 :name) == "user2"
	assert (u2 :member_id) == "1"
	
	let u3 = db-interface :auth-user db user3-token
	assert (u3 :name) == "user3"
	assert (u3 :member_id) == "9.99"
	
	assert (db-interface :auth-user db "1:gjkfse39wrw395wiej") == null
	assert (db-interface :auth-user db "") == null
	assert (db-interface :auth-user db null) == null
	
	#login-admin
	
	assert (db-interface :login-admin db "admin" "9523werfua9we") == null
	assert (((db "SELECT encoded_auth_token FROM admins") 0) :encoded_auth_token) == null
	assert (db-interface :login-admin db "admin1" "123") == null
	assert (((db "SELECT encoded_auth_token FROM admins") 0) :encoded_auth_token) == null
	
	let admin-token = assert (db-interface :login-admin db "admin" "123")
	assert (((db "SELECT encoded_auth_token FROM admins") 0) :encoded_auth_token) =/= null
	
	# auth-admin
	assert (db-interface :auth-admin db null) == false
	assert (db-interface :auth-admin db "") == false
	assert (db-interface :auth-admin db "admin:yu5rtifosdpwe") == false
	assert (db-interface :auth-admin db admin-token) == true
	
	# get-all-projects
	assert (db-interface :get-all-projects db null) == null
	assert (db-interface :get-all-projects db "admin:gijtdjifghureisdf") == null
	let all-projects = assert (db-interface :get-all-projects db admin-token)
	assert (sizeof all-projects) == 5
	
	# get-project-details
	let project-details-1 = test-get-project-details db admin-token 1
	assert (project-details-1 :project :name) == "project-d1"
	let report-info = assert (project-details-1 :report-info)
	assert (report-info :period) == 1
	assert (report-info :period-ends-at) == (1000 + (60 * 60 * 24))
	let members = project-details-1 :members
	assert (sizeof members) == 2
	assert members exists: with x do
		(and? 
			(x :name) == "user1"
			(x :member_id) == "12a"
		)
	end
	assert members exists: with x do
		(and? 
			(x :name) == "user2"
			(x :member_id) == "1"
		)
	end
	
	static-time = 12001
	let project-details-2 = test-get-project-details db admin-token 5
	assert (project-details-2 :project :name) == "project-m1"
	report-info = assert (project-details-2 :report-info)
	assert (report-info :period) == 4
	assert (report-info :period-ends-at) == 14500
	assert (report-info :time-left) == 2499
	
	members = assert (project-details-2 :members)
	assert (sizeof members) == 1
	let member = members 0
	assert (and? 
		(member :name) == "user3"
		(member :member_id) == "9.99"
	)
	
	# get-all-users
	assert (db-interface :get-all-users db null) == null
	assert (db-interface :get-all-users db (cat "admin:" (rand-hexs 32))) == null
	let all-users = assert (db-interface :get-all-users db admin-token)
	assert (sizeof all-users) == 3
	assert all-users exists: with x do
		(and? 
			(x :name) == "user1"
			(x :member_id) == "12a"
		)
	end
	assert all-users exists: with x do
		(and? 
			(x :name) == "user2"
			(x :member_id) == "1"
		)
	end
	assert all-users exists: with x do
		(and? 
			(x :name) == "user3"
			(x :member_id) == "9.99"
		)
	end
	
	# get-user-projects
	static-time = 200
	assert (sizeof (test-get-user-projects db user1-token)) == 0
	assert (sizeof (test-get-user-projects db user2-token)) == 0
	assert (sizeof (test-get-user-projects db user3-token)) == 0 
	
	static-time = 1000
	let projects1 = test-get-user-projects db user1-token
	assert (sizeof projects1) == 1
	let project = projects1 0
	
	assert ((project 0) :name) == "project-d1"
	assert (sizeof (project 1)) == 2 # project-d1 has two team members
	let rep-details = project 2
	assert (rep-details :period) == 1
	assert (rep-details :period-ends-at) == (1000 + (60 * 60 * 24))
	assert (project 3) == null # No report submitted
	
	let projects2 = test-get-user-projects db user2-token	
	assert (sizeof projects2) == 1 
	project = projects2 0
	
	assert ((project 0) :name) == "project-d1"
	assert (sizeof (project 1)) == 2 # project-d1 has two team members
	rep-details = project 2
	assert (rep-details :period) == 1
	assert (rep-details :period-ends-at) == (1000 + (60 * 60 * 24))
	assert (project 3) == null # No report submitted
	
	let projects3 = test-get-user-projects db user3-token
	assert (sizeof projects3) == 2
	assert projects3 exists: with x do
		((x 0) :name) == "project-w2"
	end
	assert projects3 exists: with x do
		((x 0) :name) == "project-m1"
	end
	assert projects3 all: with x do # Both projects only have a single member
		let members = x 1
		assert (sizeof members) == 1
		assert ((members 0) :name) == "user3"
	end
	assert projects3 all: with x do # No reports submitted
		(x 3) == null
	end
	
	# get-user-details
	test-get-user-details db user1-token "user1" "12a"
	test-get-user-details db user2-token "user2" "1"
	test-get-user-details db user3-token "user3" "9.99"
end
