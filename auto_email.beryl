let sql = require "~/sql"
let argon2 = require "~/argon2"

let auth = require "www/auth"
let projects = require "www/projects"
let utils = require "www/utils"
let mail-template = require "www/mail-templates/mail-template"

let db = sql :open (cat (getenv "LIGHTTPD_DATA_PATH") "/database")

let mail_password = strip (input read-all)

let months = (array
	"Jan"
	"Feb"
	"Mar"
	"Apr"
	"May"
	"Jun"
	"Jul"
	"Aug"
	"Sep"
	"Oct"
	"Nov"
	"Dec"
)

let format-date-time = function t do
	let two-digit = function num do
		if num < 10 do
			cat "0" num 
		end else do
			num
		end
	end
	
	let ts = convert-time t
	
	let year = ts :year
	let month = months (ts :month)
	let day = ts :day
	
	let hour = ts :hour
	let min = ts :minute
	let sec = ts :second
	
	cat day " " month " " year " " hour ":" min ":" sec " " "-0000"
end

let mail = function to to-name subject content do
	let url = getenv "AUTO_EMAIL_DOMAIN"
	let from = getenv "AUTO_EMAIL_USER"
	
	let mail-payload = (cat
		"From: Project Pulse" " <" from ">" carriage-return newline
		"To: " to-name " <" to ">" carriage-return newline
		"Date: " (format-date-time (invoke time)) carriage-return newline #"
		"Subject: " subject carriage-return newline #"
		carriage-return newline
		content
	)
	
	print "Sent mail to" to
	
	run "./send_mail.sh" url from to pass-input (cat mail_password newline mail-payload)
end

let users-without-passwords = db "SELECT id, member_id, name, email FROM users WHERE encoded_password IS NULL"

let new-user-email-template = require "www/mail-templates/new-user.template"

for-in users-without-passwords with user do

	let password = rand-hexs 16
	let enc_pass = auth :encode-password password
	db "UPDATE users SET encoded_password = ?1 WHERE id = ?2" enc_pass (user :id)

	if (user :email) =/= null do
		let email-content = mail-template new-user-email-template (struct
			:USER_ID (user :member_id)
			:USER_NAME (user :name)
			:PASSWORD password
		)
		mail (user :email) (user :name) "Account created" email-content
	end
end

let email-queue = db "SELECT id, to_name, to_email, subject, content FROM email_queue"

for-in email-queue with due-email do
	mail (due-email :to_email) (due-email :to_name) (due-email :subject) (due-email :content)
	db "DELETE FROM email_queue WHERE id = ?1" (due-email :id)
end

let all-projects = projects :get-projects db

let deadline-email-template = require "www/mail-templates/report-deadline-notification.template"

for-in all-projects with project do
	let project-members = projects :get-project-members db (project :id)
	let current-time = invoke time

	if (current-time =>= (project :start_date)) and? (current-time =<= (project :end_date)) do
		let reporting-details = projects :get-project-report-info db project
		let period = reporting-details :period
		if (period =/= null) do
			if period > (project :sent_notifications_count) and? ((reporting-details :time-left) =<= 86400) do
				db "UPDATE projects SET sent_notifications_count = ?1" period
				for-in project-members with member do
					let submitted-report = projects :get-report db (project :id) (member :id) period
					if (submitted-report == null) and? ((member :email) =/= null) do
						let mail-content = mail-template deadline-email-template (struct
							:PROJECT (project :name)
							:TIME_LEFT (utils :format-time-diff (reporting-details :time-left))
							:SUBMIT_REPORT_URL (cat "submit-report.beryl?project_id=" (project :id))
						)
						mail (member :email) (member :name) "Report deadline notification" mail-content
					end
				end
			end
		end
	end
end
