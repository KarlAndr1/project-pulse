let cgi = require "~/cgi"
let sql = require "~/sql"

let projects = require "projects"
let mail-template = require "mail-templates/mail-template"

let admin-auth = require "admin-auth"

let req-type = assert (getenv "REQUEST_METHOD")
let server-data = assert (getenv "LIGHTTPD_DATA_PATH")

let redirect-to = null

let notification-email-template = require "mail-templates/added-to-project.template"

let handle-post = function db do
	let data = cgi :parse-url-parameters (input read-all)
	
	let project-id = assert (data :project-id)
	let user-id = ((db "SELECT id FROM users WHERE member_id = ?1" (data :new-user)) 0) :id
	
	let project = projects :get-project db project-id
	
	if (user-id =/= null) and? ((project :archived) == 0) do
		try do
			db "INSERT INTO project_member_bindings (user_id, project_id) VALUES (?1, ?2)" user-id project-id
			
			let mail = mail-template notification-email-template (struct
				:PROJECT_NAME (project :name)
			)
			projects :send-email-notification db user-id "New project" mail
			redirect-to = cat "/manage-project.beryl?id=" project-id "#new-user-field"
		end catch with err do
			redirect-to = cat "/manage-project.beryl?id=" project-id "&error=new-user-error-field:User+is+already+a+member,s:h#new-user-field"
		end
	end else do
		redirect-to = cat "/manage-project.beryl?id=" project-id "&error=new-user-error-field:Invalid+ID,s:h#new-user-field"
	end
end

if req-type == "POST" do
	let cookies = cgi :parse-cookies (getenv "HTTP_COOKIE")
	let admin-login = cookies :admin-login

	let db = sql :open (cat server-data "/database")
	if (admin-auth :auth-admin db admin-login) do
		handle-post db
	end else do
		redirect-to = "/auth-error.html"
	end
	sql :close db
end

cgi :headers do
	redirect redirect-to
end
