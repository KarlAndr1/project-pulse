let cgi = require "~/cgi"
let sql = require "~/sql"

let db-interface = require "db-interface"
let mail-template = require "mail-templates/mail-template"

let notification-email-template = require "mail-templates/added-to-project.template"

let handle-post = function db admin-token do
	let data = cgi :parse-url-parameters (input read-all)
	
	let project-id = parse-number (data :project-id) default: ""
	
	let err = db-interface :add-project-member db admin-token project-id (data :new-user)
	
	cgi :headers do
		if (err == null) or? (err == :archived-project) do
			redirect (cat "/manage-project.beryl?id=" project-id "#new-user-field")
		end elseif err == :invalid-id do
			redirect (cat "/manage-project.beryl?id=" project-id "&error=new-user-error-field:Invalid+ID,s:h#new-user-field")
		end elseif err == :duplicate-member do
			redirect (cat "/manage-project.beryl?id=" project-id "&error=new-user-error-field:User+is+already+a+member,s:h#new-user-field")
		end elseif err == :auth-error do
			redirect "/auth-error.html"
		end
	end
end

let req-type = assert (getenv "REQUEST_METHOD")

if req-type == "POST" do
	let cookies = cgi :parse-cookies (getenv "HTTP_COOKIE")
	let admin-token = cookies :admin-login

	let db = sql :open (db-interface :db-path)
	handle-post db admin-token
	sql :close db
end
