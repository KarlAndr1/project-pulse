let cgi = require "~/cgi"
let sql = require "~/sql"

let db-interface = require "db-interface"
let utils = require "utils"

let handle-get = function project-name report comments prev-report-id is-admin do
	cgi :headers do
		content-type "text/html"
	end
	
	cgi :html do
		template (require "header.html")
		h 1 (cat "Report for " project-name ", period " (report :period))
		if prev-report-id =/= null do
			link "Previous report" (cat "./view-report.beryl?report-id=" prev-report-id)
		end
		
		div do
			if is-admin do
				link "➥Back" (cat "view-reports.beryl?pid=" (report :project_id) "&period=" (report :period) "#report-" (report :id))
			end
			
			p do
				template "Submitted at %0" (utils :format-time (report :time))
				if (report :marked_read) == 1 do
					template " (read ✓)"
				end
			end
			template "<div>%0</div>" (report :content)
			
			if is-admin do
				form "post-report-comment.beryl" "post" do
					template "<input type='hidden' name='report-id' value='%0'>" (report :id)
					
					template "<textarea id='comment-field' name='comment-content'></textarea>"
					
					template "<input type='submit' name='post-comment' value='Comment'/>"
					if (report :marked_read) == 0 do
						template "<input type='submit' name='mark-read' value='Mark as read'/>"
					end
				end
			end
			
			div do
				h 2 "Comments"
				if (empty? comments) do
					p "No comments..."
				end else do
					for-in comments with comment do
						div do
							h 3 (utils :format-time (comment :time))
							p (comment :content)
						end
					end
				end
			end
		end
	end
end

let req-type = assert (getenv "REQUEST_METHOD")
let cookies = cgi :parse-cookies (getenv "HTTP_COOKIE")

if req-type == "GET" do
	let params = cgi :parse-url-parameters (getenv "QUERY_STRING")
	let report-id = parse-number (params :report-id) default: ""
	
	let user-token = cookies :user-login
	let admin-token = cookies :admin-login
	
	let is-admin = false
	let report = null
	
	let db = sql :open (db-interface :db-path)
	if admin-token =/= null do
		report = db-interface :admin-get-report db admin-token report-id
		if report =/= null do
			is-admin = true
		end
	end else do
		report = db-interface :user-get-report db user-token report-id
	end
	sql :close db
	
	if report =/= null do
		handle-get (report :project-name) (report :report) (report :comments) (report :prev-report-id) is-admin
	end else do
		cgi :headers do
			redirect "/auth-error.html"
		end
	end
end

