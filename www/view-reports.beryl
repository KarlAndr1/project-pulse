let cgi = require "~/cgi"
let sql = require "~/sql"

let db-interface = require "db-interface"
let utils = require "utils"

let handle-get = function project-id period read-reports unread-reports project members-without-reports do
	
	cgi :headers do
		content-type "text/html"
	end
	
	cgi :html do
		template (require "header.html")
		h 1 (cat "Reports for " (project :name) ", period " period)
		
		div do
			link "âž¥Back" (cat "manage-project.beryl?id=" project-id)
			
			p do
				if period =/= "1" do
					link "Previous period" (cat "view-reports.beryl?pid=" project-id "&period=" (period - 1))
					print-exactly " | "
				end
				link "Next period" (cat "view-reports.beryl?pid=" project-id "&period=" (period + 1))
			end
			
			p do
				template "%0 reports submitted" (sizeof unread-reports) + (sizeof read-reports)
			end
		end
		
		section do
			div do
				h 2 "Unread"
				for-in unread-reports with report do
					template "
						<p class='highlight clickable tooltip' id='report-%0' data-text='%1'>
							%2
							<a href='view-report.beryl?report-id=%0' class='link_fill'>View</a> 
						</p>
					" (report :id) (utils :format-time (report :time)) (report :name)
				end
			end
			
			div do
				h 2 "Read"
				for-in read-reports with report do
					template "
						<p class='clickable tooltip' id='report-%0' data-text='%1'>
							%2
							<a href='view-report.beryl?report-id=%0' class='link_fill'>View</a> 
						</p>
					" (report :id) (utils :format-time (report :time)) (report :name)
				end
			end
		end
		
		div do
			h 2 "Unsubmitted"
			for-in members-without-reports with member do
				template "<p class='red'>"
				
					template "%0 (%1)" (member :name) (member :member_id)
					if (member :email) =/= null do
						template ", <a href='mailto:%0' class='tooltip' data-text='%0'>email</a>" (member :email)
					end
					if (member :phone_number) =/= null do
						template ", <a href='tel:%0' class='tooltip' data-text='%0'>phone</a>" (member :phone_number)
					end
					
				template "</p>"
			end
		end
	end
end

let cookies = cgi :parse-cookies (getenv "HTTP_COOKIE")
let req-type = assert (getenv "REQUEST_METHOD")
let params = cgi :parse-url-parameters (getenv "QUERY_STRING")

if req-type == "GET" do
	let project-id = parse-number (params :pid) default: ""
	let period = parse-number (params :period) default: ""
	let admin-token = cookies :admin-login
	
	let db = sql :open (db-interface :db-path)
	let read-reports = db-interface :get-project-reports db admin-token project-id period 1
	let unread-reports = db-interface :get-project-reports db admin-token project-id period 0
	let project = db-interface :get-project-details db admin-token project-id
	let members-without-reports = db-interface :get-members-without-reports db admin-token project-id period 
	sql :close db
	
	if read-reports =/= null do
		assert unread-reports
		assert project
		assert members-without-reports
		handle-get project-id period read-reports unread-reports (project :project) members-without-reports
	end else do
		cgi :headers do
			redirect "/auth-error.html"
		end
	end
end
