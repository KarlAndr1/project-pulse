let cgi = require "~/cgi"
let sql = require "~/sql"

let admin-auth = require "admin-auth"
let db-interface = require "db-interface"

let utils = require "utils"

let handle-get = function project report-info project-members report-count all-users do
	let current-time = invoke time
	
	cgi :headers do
		content-type "text/html"
	end

	cgi :html do
		template (require "header.html")
		template "<script src='/scripts/manage-project.js'></script>"
		
		h 1 "Project Overview"
		div do
			link "âž¥Back" "view-projects.beryl"
			
			h 2 (project :name)
			div do
				if (current-time =>= (project :start_date)) and? (current-time =<= (project :end_date)) do
					let period = report-info :period
					let next-period-at = report-info :period-ends-at
					let time-remaining = report-info :time-left
					
					if period =/= null do
						p do
							template "Next due date: %0 (Report %1)" (utils :format-time next-period-at) period
						end
						p do
							template "Time left: %0" (utils :format-time-diff time-remaining)
						end
						p do
							template "
								%0/%1 reports submitted
								<a href='view-reports.beryl?pid=%2&period=%3'>View reports</a>
							" report-count (sizeof project-members) (project :id) period
						end
					end else do
						p "No reports due"
					end
					p do
						template "Project ends at: %0" (utils :format-time (project :end_date))
					end
				end else do
					if current-time < (project :start_date) do
						format "Project begins at %0" (utils :format-time (project :start_date))
						print-exactly "Project begins at " 
					end else do
						format "Project ended at %0" (utils :format-time (project :end_date))
					end
				end
			end
			
			div do
				h 3 "Project Members"
				if (sizeof project-members) > 0 do
					html-table do
						tr do
							th "Id"
							th "Name"
							th "Email"
							th "Phone"
						end
						
						let tooltipped_td = function str do
							if (str == "") or? (str == null) do
								template "<td></td>"
							end else do
								template "<td class='tooltip' data-text='%0'>%0</td>" str
							end
						end
						
						for-in project-members with member do
							tr do
								td (member :member_id)
								tooltipped_td (member :name)
								tooltipped_td (member :email)
								tooltipped_td (member :phone_number)
							end
						end
					end
				end else do
					p "None..."
				end
				if (project :archived) == 0 do
					div do
						h 4 "Add members..."
						form "add-project-member-post.beryl" "post" "onsubmit" "return submit_new_member();" do
							template "<input type='hidden' value='%0' name='project-id'/>" (params :id)	
										
							label "new-user-field" "Select new member "
							template "<input type='text' id='new-user-field' name='new-user' list='all-users-list' placeholder='ID' class='shakable'/>"
							template "<sub class='error' id='new-user-error-field'></sub>"
							
							template "<datalist id='all-users-list'>"
							
							for-in all-users with user do
								template "<option value='%0'>%1 (%0)</option>" (user :member_id) (user :name)
							end
							
							template "</datalist>"

							submit "Add"
						end
					end
				end
			end
		end
	end
end

let cookies = cgi :parse-cookies (getenv "HTTP_COOKIE")

let params = cgi :parse-url-parameters (getenv "QUERY_STRING")
let req-type = assert (getenv "REQUEST_METHOD")

if req-type == "GET" do
	let project-id = parse-number (params :id)	
	
	let db = sql :open (db-interface :db-path)
	let project = db-interface :get-project-details db (cookies :admin-login) project-id
	let all-users = db-interface :get-all-users db (cookies :admin-login)
	sql :close db
	
	if project =/= null do
		handle-get (project :project) (project :report-info) (project :members) (project :report-count) all-users
	end else do
		cgi :headers do
			redirect "/auth-error.html"
		end
	end
end
