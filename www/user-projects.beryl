let cgi = require "~/cgi"
let sql = require "~/sql"

let db-interface = require "db-interface"
let utils = require "utils"

let handle-get = function user-projects do
	cgi :headers do
		content-type "text/html"
	end
	
	cgi :html do
		template (require "header.html")
		
		body do
			h 1 "Projects"

			for-in user-projects with project-entry do
				let project = project-entry 0
				let project-members = project-entry 1
				let report-info = project-entry 2
				let report = project-entry 3
				
				div do
					template "<h3 id='project-%0'>%1</h3>" (project :id) (project :name)
					p do
						template "Project ends at %0" (utils :format-time (project :end_date))
					end
					if (report-info :period) =/= null do
						p do
							template "Report %0 due at %1" (report-info :period) (utils :format-time (report-info :period-ends-at))
						end
						p do
							template "%0 left" (utils :format-time-diff (report-info :time-left))
						end
						p do
							if report == null do
								template "Report not submitted, "
								link "submit report" (cat "submit-report.beryl?project_id=" (project :id))
							end else do
								template "Report submitted"
								if (report :marked_read) == 1 do
									template " (Read âœ“)"
								end
								template ", "
								link "view" (cat "view-report.beryl?report-id=" (report :id))
							end
						end
					end else do
						p "No reports due"
					end
					
					template "<details>"
						template "<summary>Project members</summary>"
						div do
							for-in project-members with member do
								p do
									template "%0 (%1)" (member :name) (member :member_id)
									if (member :email) =/= null do
										template ", <a href='mailto:%0' class='tooltip' data-text='%0'>email</a>" (member :email)
									end
									if (member :phone_number) =/= null do
										template ", <a href='tel:%0' class='tooltip' data-text='%0'>phone</a>" (member :phone_number)
									end
								end
							end
						end
					template "</details>"
				end
			end
		end
	end
end

let req-type = assert (getenv "REQUEST_METHOD")
let cookies = cgi :parse-cookies (getenv "HTTP_COOKIE")

if req-type == "GET" do
	let db = sql :open (db-interface :db-path)
	let projects = db-interface :get-user-projects db (cookies :user-login)
	sql :close db
	
	if projects =/= null do
		handle-get projects
	end else do
		cgi :headers do
			redirect "/auth-error.html"
		end
	end
end
