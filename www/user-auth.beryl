require-version 0

(struct
	:argon2 (require "~/argon2")
	:auth (require "auth")
	
	# Create a new token for this user
	:login-user function sql db member_id pass do
		let user = (db "SELECT id, encoded_password FROM users WHERE member_id = ?1" member_id) 0
		if (user =/= null) and? ((user :encoded_password) =/= null) do
			let correct = (self :argon2) :verify (user :encoded_password) pass
			if correct do
				let token = invoke (self :auth :new-session-token)
				let plain-token = token 0
				let encoded_token = token 1
				
				db "
					INSERT INTO 
						user_logins (user_id, encoded_auth_token) 
					VALUES 
						(?1, ?2)
				" (user :id) encoded_token
				
				let login-id = sql :get-last-insert-rowid db
				
				cat login-id ":" plain-token
			end
		end # else null
	end
	
	:logout-user function db token-cookie do
		let user = self :auth-user db token-cookie
		if user =/= null do
			assert
			let login-id = assert ((split token-cookie ":") 0)
			db "DELETE FROM user_logins WHERE id = ?" login-id
		end
	end
	
	:auth-user function db token-cookie do #Returns user_id if the credentials are correct, null otherwise
		let user = null
		if (token-cookie =/= "") and? (token-cookie =/= null) do
			let entries = split token-cookie ":"
			let login-id = assert (entries 0)
			let token = assert (entries 1)
		
			let login = (db "SELECT encoded_auth_token, user_id FROM user_logins WHERE id = ?1" login-id) 0
			let encoded-token = login :encoded_auth_token
			if encoded-token =/= null do
				let passed = (self :argon2) :verify encoded-token token
				if passed do
					user = login :user_id
				end
			end
		end

		user
	end
)
