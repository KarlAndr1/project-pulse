let cgi = require "~/cgi"
let sql = require "~/sql"

let db-interface = require "db-interface"
let utils = require "utils"

let min-password-length = 8

let handle-get = function user do
	cgi :headers do
		content-type "text/html"
	end
	
	cgi :html do
		template (require "header.html")
		template "<script src='/scripts/manage-user-profile.js'></script>"
		
		body do
			h 1 (user :name) cat: " profile overview"
			section do
				div do
					template "
						<p>Name: %0</p>
						<p>Phone: %1</p>
						<p>Email: %2</p>
						<p>ID: %3</p>
					" (user :name) (user :phone) default: "None" (user :email) default: "None" (user :member_id)
				end
				div do
					h 2 "Update password"
					template "<form method='post' onsubmit='return update_password_submit();'>"
						template "<label for='old-password-field'>Current password</label>"
						template "<input type='password' name='old-password' id='old-password-field' required>"
						template "<sub class='error' id='old-password-field-error'></sub>"
						
						template "<label for='new-password-field-1'>New password</label>"
						template "<input type='password' name='new-password-1' id='new-password-field-1' class='shakable' minlength='%0' required>" min-password-length
						
						template "<label for='new-password-field-2'>Confirm password</label>"
						template "<input type='password' name='new-password-2' id='new-password-field-2' class='shakable' required>"
						template "<sub class='error' id='password-field-error'></sub>"
						
						template "<input type='submit' value='Update password'/>"
					template "</form>"
				end
				
			end
		end
	end
end

let handle-post = function db user-token params do
	let redirect-to = null
	
	if ((params :new-password-1) == (params :new-password-2)) and? ((sizeof (params :new-password-1)) =>= min-password-length) do
		let err = db-interface :update-user-password db user-token (params :old-password) (params :new-password-1)
		
		cgi :headers do
			if err == null do
				redirect "manage-user-profile.beryl"
			end elseif err == :auth-error do
				redirect "/auth-error.html"
			end elseif err == :wrong-password do
				redirect "manage-user-profile.beryl?error=old-password-field-error:Invalid+password,s:h"
			end
		end
	end else do
		cgi :headers do
			redirect "manage-user-profile.beryl"
		end
	end
end

let cookies = cgi :parse-cookies (getenv "HTTP_COOKIE")
let req-type = assert (getenv "REQUEST_METHOD")

if req-type == "GET" do
	let db = sql :open (db-interface :db-path)
	let user-details = db-interface :get-user-details db (cookies :user-login)
	sql :close db
	
	if user-details =/= null do
		handle-get user-details
	end else do
		cgi :headers do
			redirect "/auth-error.html"
		end
	end
end elseif req-type == "POST" do
	let db = sql :open (db-interface :db-path)
	let params = cgi :parse-url-parameters (input read-all)
	handle-post db (cookies :user-login) params
	sql :close db
end
