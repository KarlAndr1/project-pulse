let cgi = require "~/cgi"
let sql = require "~/sql"
let argon2 = require "~/argon2"

let req-type = assert (getenv "REQUEST_METHOD")
let http-header-lbrk = cat carriage-return newline

let server-data = assert (getenv "LIGHTTPD_DATA_PATH")

let redirect-to = "/add-users.html"

let admin-auth = require "admin-auth"

let parse-csv = function csv do
	let lines = split (strip csv) newline
	
	lines map= with x do
		map (split x ",") strip
	end

	lines
end

let log = function ... msg do
	append (cat server-data "/log.txt") (cat (invoke time) ":" (apply cat msg) newline)
end

let handle-post = function do
	let post-data = input read-all # Read everything from stdin
	let lines = split post-data http-header-lbrk
	
	let delimiter = (assert (lines 0)) cat: "--" # This ends the POST body
	
	let headers-end = assert (find-in lines "") # Find the end of the headers (an empty line, just a line break)
	let body-end = assert (find-in lines delimiter)
	
	let content = slice lines headers-end + 1 body-end
	content = content join-with: newline
	
	write (cat server-data "/test-data.csv") content
	redirect-to = "/"
	
	let data = parse-csv content
	
	log "Recieved " (sizeof data) " users"
	
	let db = sql :open (cat server-data "/database")
	for-in data with row do
		let id = row 0
		let name = row 1
		let mail = row 2
		let phone = row 3
		
		if mail == "" do
			mail = null
		end
		if phone == "" do
			phone = null
		end
		
		db "INSERT OR IGNORE INTO users (member_id, name, email, phone_number, encoded_password) VALUES (?1, ?2, ?3, ?4, NULL)" id name mail phone
	end
	
	sql :close db # Not strictly needed as refcounting will clean close this when the function exits anyway
end

if req-type == "POST" do
	let cookies = cgi :parse-cookies (getenv "HTTP_COOKIE")
	let admin-login = cookies :admin-login

	let db = sql :open (cat server-data "/database")
	if (admin-auth :auth-admin db admin-login) do
		invoke handle-post
	end else do
		redirect-to = "/auth-error.html"
	end
	sql :close db
end

cgi :headers do
	redirect redirect-to
end
