let cgi = require "~/cgi"
let sql = require "~/sql"

let db-interface = require "db-interface"
let utils = require "utils"

let handle-get = function project-id project do
	cgi :headers do
		content-type "text/html"
	end
	
	cgi :html do
		template (require "header.html")
		template "<script src='/scripts/add-project-dates.js'></script>"		
		
		h 1 "Select project report dates"
		
		template "<input type='hidden' id='project_end_date' value='%0'/>" (utils :format-time-iso (project :end_date))
		template "<input type='hidden' id='project_start_date' value='%0'/>" (utils :format-time-iso (project :start_date))
		
		p do
			template "Project start date: <time>%0</time>" (utils :format-time (project :start_date))
		end
		p do
			template "Project end date: <time>%0</time>"  (utils :format-time (project :end_date))
		end
		
		section do
			form "add-project-dates.beryl" "post" do
				
				template "<input type='hidden' value='%0' name='project-id'/>" project-id
				
				template "<span>"
					template "<input type='datetime-local' name='date_picker' id='date_picker' class='shakable'>"
					template "<sub class='error' id='date_error_text'></sub>" 
					
					template "<input type='button' onclick='add_date()' value='Add'>"
				template "</span>"
				
				template "<span hidden id='form_date_list'> </span>"
				
				submit "Submit"
			end
			
			template "<div id='date_list'></div>"
		end
	end
end

let handle-post = function db admin-token do
	let data = cgi :parse-url-parameters (input read-all)
	let project-id = data :project-id
	
	let dates = filter (pairs data) with entry do
		(entry 0) beginswith? "selected_date"
	end
	
	dates map= with entry do
		utils :parse-datetime (entry 1)
	end
	
	let ok = db-interface :set-project-report-dates db admin-token project-id dates
	
	cgi :headers do
		if ok do
			redirect (cat "/manage-project.beryl?id=" project-id)
		end else do
			redirect "/auth-error.html"
		end
	end
end

let cookies = cgi :parse-cookies (getenv "HTTP_COOKIE")
let req-type = assert (getenv "REQUEST_METHOD")
let admin-token = cookies :admin-login

if req-type == "GET" do
	let params = cgi :parse-url-parameters (getenv "QUERY_STRING")
	let project-id = parse-number (params :id) default: ""
	
	let db = sql :open (db-interface :db-path)
	let project = db-interface :get-project-details db admin-token project-id
	sql :close db
	
	if project =/= null do
		handle-get project-id (project :project)
	end else do
		cgi :headers do
			redirect "auth-error.html"
		end
	end
end elseif req-type == "POST" do
	let db = sql :open (db-interface :db-path)
	handle-post db admin-token
	sql :close db
end
