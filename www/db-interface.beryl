require-version 0

(struct
	:argon2 (require "~/argon2")
	:auth (require "auth")
	:sql (require "~/sql")
	
	# ------- User auth
	
	# Create a new token for this user
	:login-user function sql db member_id pass do
		let user = (db "SELECT id, encoded_password FROM users WHERE member_id = ?1" member_id) 0
		if (user =/= null) and? ((user :encoded_password) =/= null) do
			let correct = (self :argon2) :verify (user :encoded_password) pass
			if correct do
				let token = invoke (self :auth :new-session-token)
				let plain-token = token 0
				let encoded_token = token 1
				
				db "
					INSERT INTO 
						user_logins (user_id, encoded_auth_token) 
					VALUES 
						(?1, ?2)
				" (user :id) encoded_token
				
				let login-id = sql :get-last-insert-rowid db
				
				cat login-id ":" plain-token
			end
		end # else null
	end
	
	:logout-user function db token-cookie do
		let user = self :auth-user db token-cookie
		if user =/= null do
			db "DELETE FROM user_logins WHERE user_id = ?" (user :id)
		end
	end
	
	:auth-user function db token-cookie do #Returns the user if the credentials are correct, null otherwise
		let user-id = null
		if token-cookie =/= null do
			let entries = split token-cookie ":"
			let login-id = entries 0
			let token = entries 1
			
			let login = (db "SELECT encoded_auth_token, user_id FROM user_logins WHERE id = ?1" login-id) 0
			let encoded-token = login :encoded_auth_token
			if (token =/= null) and? (encoded-token =/= null) do
				let passed = (self :argon2) :verify encoded-token token
				if passed do
					user-id = login :user_id
				end
			end
		end

		if user-id =/= null do
			(db "SELECT id, name, member_id, email, phone_number FROM users WHERE id = ?1" user-id) 0
		end else do
			null
		end
	end
	
	:verify-user-password function db user-id password do
		let encoded-pass = ((db "SELECT encoded_password FROM users WHERE id = ?1" user-id) 0) :encoded_password
		if encoded-pass =/= null do
			(self :argon2) :verify encoded-pass password
		end else do
			false
		end
	end
	
	:update-user-password function db user-id old-password new-password do
		if (self :verify-user-password db user-id old-password) do
			let encoded-pass = (self :auth) :encode-password new-password
			db "UPDATE users SET encoded_password = ?1 WHERE id = ?2" encoded-pass user-id
			true
		end else do
			false
		end
	end
	
	# ------------ Admin auth
	
	:login-admin function db name pass do
		let admin-info = (db "SELECT encoded_password, encoded_auth_token FROM admins WHERE name = ?1" name) 0
		if admin-info =/= null do
		
			let correct = (self :argon2) :verify (admin-info :encoded_password) pass
			if correct do
				let token = invoke (self :auth :new-session-token)
				let plain-token = token 0
				let encoded-token = token 1
				# Overwrites the existing token. A single admin account can only be logged in via a single token at a time.
				# This would mainly cause an issue if someone tried to log in to the same account using different browsers/machines
				# since the token cookie would only exist in one browser at a time
				db "UPDATE admins SET encoded_auth_token = ?1 WHERE name = ?2" encoded-token name
				cat name ":" plain-token # Return the new token
			end
		end # else just null
	end
	
	:logout-admin function db token-cookie do
		let passed = self :auth-admin db token-cookie
		if passed do
			let name = assert ((split token-cookie ":") 0)
			db "UPDATE admins SET encoded_auth_token = NULL WHERE name = ?1" name
		end
	end
	
	:auth-admin function db token-cookie do # Returns true 
		let passed = false
		if (token-cookie =/= "") and? (token-cookie =/= null) do
			let entries = split token-cookie ":"
			let name = entries 0
			let token = entries 1
		
			let encoded-token = ((db "SELECT encoded_auth_token FROM admins WHERE name = ?1" name) 0) :encoded_auth_token
			if (token =/= null) and? (encoded-token =/= null) do
				passed = (self :argon2) :verify encoded-token token
			end
		end

		passed
	end
	
	# --- Admin interfaces
	
	:add-users function db admin-token users do
		if (self :auth-admin db admin-token) do
			for-in users with user do
				let member-id = user 0
				let name = user 1
				let email = user 2
				if email == "" do
					email = null
				end
				let phone-number = user 3
				if phone-number == "" do
					phone-number = null
				end
				
				db "
					INSERT OR IGNORE INTO users 
						(member_id, name, email, phone_number, encoded_password) 
					VALUES
						(?1, ?2, ?3, ?4, NULL)
				" member-id name email phone-number
			end
			true
		end else do
			false
		end
	end
	
	:create-new-project function db admin-token name freq-time start-date end-date do
		let current-time = invoke time
		if (self :auth-admin db admin-token) do
			if (start-date =<= end-date) and? (end-date =>= current-time) do
				db "
					INSERT INTO projects
						(name, report_frequency, start_date, end_date)
					VALUES
						(?1, ?2, ?3, ?4)
				" name freq-time start-date end-date
				
				let project-id = sql :get-last-insert-rowid db
				array project-id null
			end else do
				array null "invalid-dates"
			end
		end else do
			array null "auth-error"
		end
	end
	
	:get-all-projects function db admin-token do
		if (self :auth-admin db admin-token) do
			db "
				SELECT 
					id, name, report_frequency, start_date, end_date, (?1 > end_date) as archived 
				FROM projects 
				ORDER BY archived 
			" (invoke time)
		end else do
			null
		end
	end
	
	:get-project-details function db admin-token project-id do
		if (self :auth-admin db admin-token) do
			let project = (db "
				SELECT id, name, report_frequency, start_date, end_date, (?1 > end_date) as archived, sent_notifications_count FROM projects WHERE id = ?2
			" (invoke time) project-id) 0
			let project-report-details = self :__get-project-report-info db project
			let project-members = self :__get-project-members db project-id
			let report-count = sizeof (self :get-project-reports db admin-token project-id (project-report-details :period) null)
			
			struct :project project :report-info project-report-details :members project-members :report-count report-count
		end else do
			null
		end
	end
	
	:get-all-users function db admin-token do
		if (self :auth-admin db admin-token) do
			db "SELECT id, member_id, name, email, phone_number FROM users"
		end else do
			null
		end
	end
	
	:get-project-reports function db admin-token project-id period marked-read do #Marked read can be either 0, 1, or null (i.e both)
		if (self :auth-admin db admin-token) do
			db "
				SELECT 
					r.id as id, 
					r.content as content, 
					r.time as time, 
					u.name as name, 
					u.member_id as member_id, 
					u.email as email, 
					u.phone_number as phone_number,
					r.marked_read as marked_read
				FROM reports as r
				JOIN users as u
					ON u.id = r.user_id
				WHERE
					r.project_id = ?1 AND r.period = ?2 AND
					(r.marked_read = ?3 OR ?3 IS NULL)
				ORDER BY r.time DESC
			" project-id period marked-read
		end else do
			null
		end
	end
	
	:get-members-without-reports function db admin-token project-id period do
		if (self :auth-admin db admin-token) do
			# https://stackoverflow.com/questions/1247361/get-the-inverse-of-a-join
			let members-without-reports = db "
				SELECT * FROM (
					SELECT
						u.name, u.member_id, u.email, u.phone_number, r.id as rid
					FROM users as u
					JOIN project_member_bindings as m
					ON
						m.user_id = u.id AND
						m.project_id = ?1
					LEFT JOIN reports as r
					ON
						r.user_id = u.id AND
						r.period = ?2 AND
						r.project_id = ?1
				)
				WHERE
					rid is NULL
			" project-id period
		end else do
			null
		end
	end
	
	:admin-get-report function db admin-token report-id do
		if (self :auth-admin db admin-token) do
			self :__get-report db report-id
		end else do
			null
		end
	end
	
	:mark-report-read function db admin-token report-id do
		if (self :auth-admin db admin-token) do
			db "UPDATE reports SET marked_read = 1 WHERE id = ?1" report-id
			true
		end else do
			false
		end
	end
	
	:post-report-comment function db admin-token report-id comment do
		if (self :auth-admin db admin-token) do
			db "
				INSERT INTO report_comments
					(report_id, time, content)
				VALUES
					(?1, ?2, ?3)
			" report-id (invoke time) comment
			true
		end else do
			false
		end
	end
	
	# ---------- User actions
	
	:user-get-report function db user-token report-id do
		let user = self :auth-user db user-token
		let report = self :__get-report db report-id
		if (user =/= null) and? ((report :report :user_id) == (user :id)) do
			report
		end else do
			null
		end
	end
	
	# ---------- General, both user and admin related
	
	:__get-report function db report-id do
		let report = (db "SELECT id, time, period, content, marked_read, project_id, user_id FROM reports WHERE id = ?1" report-id) 0
		let project-name = ((db "SELECT name FROM projects WHERE id = ?1" (report :project_id)) 0) :name
		let comments = db "SELECT content, time FROM report_comments WHERE report_id = ?1 ORDER BY time DESC" report-id
		
		let prev-report = (db "
			SELECT 
				id
			FROM reports
			WHERE 
				user_id = ?1 AND
				project_id = ?2 AND
				period < ?3
			ORDER BY period DESC
			LIMIT 1
		" (report :user_id) (report :project_id) (report :period)) 0
		
		struct :report report :project-name project-name :comments comments :prev-report-id (prev-report :id)
	end
	
	:is-holiday function t do
		let ts = convert-time t
		((ts :weekday) == 5) or? ((ts :weekday) == 6)
	end
	
	:__get-project-report-info function db project do
		let period = null
		let next-period-at = null
		let current-time = invoke time
		
		if (project :report_frequency) == (60 * 60 * 24) do # Special case for daily reporting
			let date = convert-time (project :start_date)
			period = 0 
			loop do
				let is-holiday = self :is-holiday (get-time date)
				let end-date = replace date :day (date :day) + 1 # The end date is just the date + 1 day
				end-date = replace end-date :daylight-savings ((convert-time (get-time end-date)) :daylight-savings) # So that if we happen
				# to cross the daylight savings edge, the end-date is 00:00 at the correct daylight savings setting. Otherwise it'd be 23:00 or 01:00
				# basically we just take whatever time the end date is at, check if that is within daylight savings and if so adjust it
				
				next-period-at = get-time end-date
				
				if (not is-holiday) do
					period += 1 # Holidays don't count as a period
				end
				
				date = end-date # Increment to the next day
				
				# Find the first date has an end date *after* the current time and is not a holiday. I.e continue looping if the current day is
				# a holiday *OR* the next-period-at time has already been passed
				is-holiday or? (next-period-at < current-time) 
			end
			
			if next-period-at > (project :end_date) do
				period = null
			end
		end elseif (project :report_frequency) =/= null do # Fixed frequency
			let time-since = current-time - (project :start_date)
			period = floor time-since / (project :report_frequency)
			period += 1 # So that it begins with period 1, not 0
			
			next-period-at = (project :start_date) + (period * (project :report_frequency))
			if (project :end_date) < next-period-at do
				period = null
				#next-period-at = project :end_date
			end
		end else do # Custom/manually picked reporting dates
			let report-dates = db "SELECT _date FROM project_report_dates WHERE project_id = ?1 ORDER BY _date" (project :id)
			period = first report-dates with date do # Find the first report date that is after the current date, i.e the first one still open for submissions
				(date :_date) =>= current-time
			end

			if period =/= null do
				next-period-at = (report-dates period) :_date
				period += 1
			end
		end
		
		(struct
			:period period
			:period-ends-at next-period-at
			:time-left next-period-at default: 0 - current-time
		)
	end
	
	:__get-project-members function db project-id do
		db "
		SELECT 
			u.id as id,
			u.name as name, 
			u.member_id as member_id,
			u.email as email,
			u.phone_number as phone_number
		FROM project_member_bindings as p 
		JOIN users as u 
			ON u.id = p.user_id 
		WHERE p.project_id = ?1
		" project-id
	end
	
	:db-path (cat (getenv "LIGHTTPD_DATA_PATH") "/database")
)
