require-version 0

(struct
	:argon2 (require "~/argon2")
	:auth (require "auth")
	:sql (require "~/sql")
	
	# ------- User auth
	
	# Create a new token for this user
	:login-user function sql db member_id pass do
		let user = (db "SELECT id, encoded_password FROM users WHERE member_id = ?1" member_id) 0
		if (user =/= null) and? ((user :encoded_password) =/= null) do
			let correct = (self :argon2) :verify (user :encoded_password) pass
			if correct do
				let token = invoke (self :auth :new-session-token)
				let plain-token = token 0
				let encoded_token = token 1
				
				db "
					INSERT INTO 
						user_logins (user_id, encoded_auth_token) 
					VALUES 
						(?1, ?2)
				" (user :id) encoded_token
				
				let login-id = sql :get-last-insert-rowid db
				
				cat login-id ":" plain-token
			end
		end # else null
	end
	
	:logout-user function db token-cookie do
		let user = self :auth-user db token-cookie
		if user =/= null do
			db "DELETE FROM user_logins WHERE user_id = ?" (user :id)
		end
	end
	
	:auth-user function db token-cookie do #Returns the user if the credentials are correct, null otherwise
		let user-id = null
		if token-cookie =/= null do
			let entries = split token-cookie ":"
			let login-id = entries 0
			let token = entries 1
			
			let login = (db "SELECT encoded_auth_token, user_id FROM user_logins WHERE id = ?1" login-id) 0
			let encoded-token = login :encoded_auth_token
			if (token =/= null) and? (encoded-token =/= null) do
				let passed = (self :argon2) :verify encoded-token token
				if passed do
					user-id = login :user_id
				end
			end
		end

		if user-id =/= null do
			(db "SELECT id, name, member_id, email, phone_number FROM users WHERE id = ?1" user-id) 0
		end else do
			null
		end
	end
	
	:verify-user-password function db user-id password do
		let encoded-pass = ((db "SELECT encoded_password FROM users WHERE id = ?1" user-id) 0) :encoded_password
		if encoded-pass =/= null do
			(self :argon2) :verify encoded-pass password
		end else do
			false
		end
	end
	
	:update-user-password function db user-id old-password new-password do
		if (self :verify-user-password db user-id old-password) do
			let encoded-pass = (self :auth) :encode-password new-password
			db "UPDATE users SET encoded_password = ?1 WHERE id = ?2" encoded-pass user-id
			true
		end else do
			false
		end
	end
	
	# ------------ Admin auth
	
	:login-admin function db name pass do
		let admin-info = (db "SELECT encoded_password, encoded_auth_token FROM admins WHERE name = ?1" name) 0
		if admin-info =/= null do
		
			let correct = (self :argon2) :verify (admin-info :encoded_password) pass
			if correct do
				let token = invoke (self :auth :new-session-token)
				let plain-token = token 0
				let encoded-token = token 1
				# Overwrites the existing token. A single admin account can only be logged in via a single token at a time.
				# This would mainly cause an issue if someone tried to log in to the same account using different browsers/machines
				# since the token cookie would only exist in one browser at a time
				db "UPDATE admins SET encoded_auth_token = ?1 WHERE name = ?2" encoded-token name
				cat name ":" plain-token # Return the new token
			end
		end # else just null
	end
	
	:logout-admin function db token-cookie do
		let passed = self :auth-admin db token-cookie
		if passed do
			let name = assert ((split token-cookie ":") 0)
			db "UPDATE admins SET encoded_auth_token = NULL WHERE name = ?1" name
		end
	end
	
	:auth-admin function db token-cookie do # Returns true 
		let passed = false
		if (token-cookie =/= "") and? (token-cookie =/= null) do
			let entries = split token-cookie ":"
			let name = entries 0
			let token = entries 1
		
			let encoded-token = ((db "SELECT encoded_auth_token FROM admins WHERE name = ?1" name) 0) :encoded_auth_token
			if (token =/= null) and? (encoded-token =/= null) do
				passed = (self :argon2) :verify encoded-token token
			end
		end

		passed
	end
	
	# --- Admin interfaces
	
	:add-users function db admin-token users do
		if (self :auth-admin db admin-token) do
			for-in users with user do
				let member-id = user 0
				let name = user 1
				let email = user 2
				if email == "" do
					email = null
				end
				let phone-number = user 3
				if phone-number == "" do
					phone-number = null
				end
				
				db "
					INSERT OR IGNORE INTO users 
						(member_id, name, email, phone_number, encoded_password) 
					VALUES
						(?1, ?2, ?3, ?4, NULL)
				" member-id name email phone-number
			end
			true
		end else do
			false
		end
	end
	
	:create-new-project function db admin-token name freq-time start-date end-date do
		let current-time = invoke time
		if (self :auth-admin db admin-token) do
			if (start-date =<= end-date) and? (end-date =>= current-time) do
				db "
					INSERT INTO projects
						(name, report_frequency, start_date, end_date)
					VALUES
						(?1, ?2, ?3, ?4)
				" name freq-time start-date end-date
				
				let project-id = sql :get-last-insert-rowid db
				array project-id null
			end else do
				array null "invalid-dates"
			end
		end else do
			array null "auth-error"
		end
	end
	
	:get-all-projects function db admin-token do
		if (self :auth-admin db admin-token) do
			db "
				SELECT 
					id, name, report_frequency, start_date, end_date, (?1 > end_date) as archived 
				FROM projects 
				ORDER BY archived 
			" (invoke time)
		end else do
			null
		end
	end
	
	:db-path (cat (getenv "LIGHTTPD_DATA_PATH") "/database")
)
